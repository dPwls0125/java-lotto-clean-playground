package manager;

import domain.*;
import util.LottoFactory;
import util.ManualNumberGenerator;
import util.NumbersGenerator;
import util.RandomNumbersGenerator;
import view.InputView;
import view.OutputView;

import java.util.ArrayList;
import java.util.List;

public class LottoManager {

    private final LottoFactory lottoFactory;
    private final NumbersGenerator randomNumbersGenerator = new RandomNumbersGenerator();

    public LottoManager(LottoFactory lottoFactory) {
        this.lottoFactory = lottoFactory;
    }

    public UserLottos IssuingLottoTickets() {
        Amount amount = getTicketCountFromInput();
        TicketCount purchasedTicketCount = TicketCount.from(amount);
        // manual issuing
        TicketCount manualLottoCount = InputView.induceManulLottoCountToBeEntered(purchasedTicketCount);
        List<Lotto> manualLottos = generateManualLottos(manualLottoCount);
        // auto issuing
        List<Lotto> autoLottos = generateAutoLottos(purchasedTicketCount);

        UserLottos userLottos = UserLottos.Builder.builder()
                .manualLottos(manualLottos)
                .autoLottos(autoLottos)
                .purchaseAmount(amount).build();

        printUserLottos(manualLottoCount, purchasedTicketCount, userLottos);
        return userLottos;
    }

    public void calculateAndShowWinningStatistics(UserLottos userLottos) {
        WinningNumbers winningNumbers = InputView.induceTheWinningNumberToBeEntered();
        WinningResult winningResult = userLottos.getWinningResult(winningNumbers);
        OutputView.printWinningCorrespondResult(winningResult);

        double yield = winningResult.getYield(userLottos.getPurchaseAmount());
        boolean isItLoss = winningResult.getIsItLoss(yield);
        OutputView.printStatistics(yield, isItLoss);
    }

    private Amount getTicketCountFromInput() {
        return InputView.induceTheAmountToBeEntered();
    }

    private List<Lotto> generateManualLottos(TicketCount manualLottoCount) {

        List<List<Integer>> manualLottosNumbers = InputView.readManualLottoNumbers(manualLottoCount);
        List<Lotto> manuallyGeneratedLottos = new ArrayList<>();

        for (List<Integer> lottoNumbers : manualLottosNumbers) {
            lottoFactory.changeNumberGenerateStrategy(new ManualNumberGenerator(lottoNumbers));
            manuallyGeneratedLottos.add(lottoFactory.generateLotto());
        }

        return manuallyGeneratedLottos;
    }

    private List<Lotto> generateAutoLottos(TicketCount ticketCount) {
        lottoFactory.changeNumberGenerateStrategy(randomNumbersGenerator);
        List<Lotto> autoGeneratedLottos = new ArrayList<>();
        for (int i = 0; i < ticketCount.getValue(); i++) {
            autoGeneratedLottos.add(lottoFactory.generateLotto());
        }
        return autoGeneratedLottos;
    }

    private void printUserLottos(TicketCount manualLottoCount, TicketCount ticketCount, UserLottos userLottos) {
        OutputView.printNumberOfLottoes(manualLottoCount, ticketCount);
        OutputView.printIssuedLottoTickets(userLottos);
    }
}
